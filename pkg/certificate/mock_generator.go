// Code generated by mockery v2.53.2. DO NOT EDIT.

package certificate

import mock "github.com/stretchr/testify/mock"

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

type MockGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator) EXPECT() *MockGenerator_Expecter {
	return &MockGenerator_Expecter{mock: &_m.Mock}
}

// MakeCredStores provides a mock function with given fields: accessKey, accessCert, caCert
func (_m *MockGenerator) MakeCredStores(accessKey string, accessCert string, caCert string) (*CredStoreData, error) {
	ret := _m.Called(accessKey, accessCert, caCert)

	if len(ret) == 0 {
		panic("no return value specified for MakeCredStores")
	}

	var r0 *CredStoreData
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*CredStoreData, error)); ok {
		return rf(accessKey, accessCert, caCert)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *CredStoreData); ok {
		r0 = rf(accessKey, accessCert, caCert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CredStoreData)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(accessKey, accessCert, caCert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenerator_MakeCredStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeCredStores'
type MockGenerator_MakeCredStores_Call struct {
	*mock.Call
}

// MakeCredStores is a helper method to define mock.On call
//   - accessKey string
//   - accessCert string
//   - caCert string
func (_e *MockGenerator_Expecter) MakeCredStores(accessKey interface{}, accessCert interface{}, caCert interface{}) *MockGenerator_MakeCredStores_Call {
	return &MockGenerator_MakeCredStores_Call{Call: _e.mock.On("MakeCredStores", accessKey, accessCert, caCert)}
}

func (_c *MockGenerator_MakeCredStores_Call) Run(run func(accessKey string, accessCert string, caCert string)) *MockGenerator_MakeCredStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGenerator_MakeCredStores_Call) Return(_a0 *CredStoreData, _a1 error) *MockGenerator_MakeCredStores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenerator_MakeCredStores_Call) RunAndReturn(run func(string, string, string) (*CredStoreData, error)) *MockGenerator_MakeCredStores_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockGenerator {
	mock := &MockGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
