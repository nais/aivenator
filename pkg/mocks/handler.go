// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	aiven_nais_io_v1 "github.com/nais/liberator/pkg/apis/aiven.nais.io/v1"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, application, secret, logger
func (_m *Handler) Apply(ctx context.Context, application *aiven_nais_io_v1.AivenApplication, secret *v1.Secret, logger logrus.FieldLogger) error {
	ret := _m.Called(ctx, application, secret, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiven_nais_io_v1.AivenApplication, *v1.Secret, logrus.FieldLogger) error); ok {
		r0 = rf(ctx, application, secret, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cleanup provides a mock function with given fields: ctx, secret, logger
func (_m *Handler) Cleanup(ctx context.Context, secret *v1.Secret, logger *logrus.Entry) error {
	ret := _m.Called(ctx, secret, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret, *logrus.Entry) error); ok {
		r0 = rf(ctx, secret, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
