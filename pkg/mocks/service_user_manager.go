// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	aiven "github.com/aiven/aiven-go-client/v2"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ServiceUserManager is an autogenerated mock type for the ServiceUserManager type
type ServiceUserManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, serviceUserName, projectName, serviceName, accessControl, logger
func (_m *ServiceUserManager) Create(ctx context.Context, serviceUserName string, projectName string, serviceName string, accessControl *aiven.AccessControl, logger logrus.FieldLogger) (*aiven.ServiceUser, error) {
	ret := _m.Called(ctx, serviceUserName, projectName, serviceName, accessControl, logger)

	var r0 *aiven.ServiceUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) (*aiven.ServiceUser, error)); ok {
		return rf(ctx, serviceUserName, projectName, serviceName, accessControl, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) *aiven.ServiceUser); ok {
		r0 = rf(ctx, serviceUserName, projectName, serviceName, accessControl, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.ServiceUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) error); ok {
		r1 = rf(ctx, serviceUserName, projectName, serviceName, accessControl, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, serviceUserName, projectName, serviceName, logger
func (_m *ServiceUserManager) Delete(ctx context.Context, serviceUserName string, projectName string, serviceName string, logger logrus.FieldLogger) error {
	ret := _m.Called(ctx, serviceUserName, projectName, serviceName, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, logrus.FieldLogger) error); ok {
		r0 = rf(ctx, serviceUserName, projectName, serviceName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, serviceUserName, projectName, serviceName, logger
func (_m *ServiceUserManager) Get(ctx context.Context, serviceUserName string, projectName string, serviceName string, logger logrus.FieldLogger) (*aiven.ServiceUser, error) {
	ret := _m.Called(ctx, serviceUserName, projectName, serviceName, logger)

	var r0 *aiven.ServiceUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, logrus.FieldLogger) (*aiven.ServiceUser, error)); ok {
		return rf(ctx, serviceUserName, projectName, serviceName, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, logrus.FieldLogger) *aiven.ServiceUser); ok {
		r0 = rf(ctx, serviceUserName, projectName, serviceName, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.ServiceUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, logrus.FieldLogger) error); ok {
		r1 = rf(ctx, serviceUserName, projectName, serviceName, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheExpiration provides a mock function with given fields:
func (_m *ServiceUserManager) GetCacheExpiration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ObserveServiceUsersCount provides a mock function with given fields: ctx, projectName, serviceName, logger
func (_m *ServiceUserManager) ObserveServiceUsersCount(ctx context.Context, projectName string, serviceName string, logger logrus.FieldLogger) {
	_m.Called(ctx, projectName, serviceName, logger)
}

// NewServiceUserManager creates a new instance of ServiceUserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceUserManager {
	mock := &ServiceUserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
