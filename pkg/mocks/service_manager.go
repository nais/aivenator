// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	aiven "github.com/aiven/aiven-go-client/v2"

	mock "github.com/stretchr/testify/mock"

	service "github.com/nais/aivenator/pkg/aiven/service"
)

// ServiceManager is an autogenerated mock type for the ServiceManager type
type ServiceManager struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, projectName, serviceName
func (_m *ServiceManager) Get(ctx context.Context, projectName string, serviceName string) (*aiven.Service, error) {
	ret := _m.Called(ctx, projectName, serviceName)

	var r0 *aiven.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*aiven.Service, error)); ok {
		return rf(ctx, projectName, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aiven.Service); ok {
		r0 = rf(ctx, projectName, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectName, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAddresses provides a mock function with given fields: ctx, projectName, serviceName
func (_m *ServiceManager) GetServiceAddresses(ctx context.Context, projectName string, serviceName string) (*service.ServiceAddresses, error) {
	ret := _m.Called(ctx, projectName, serviceName)

	var r0 *service.ServiceAddresses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*service.ServiceAddresses, error)); ok {
		return rf(ctx, projectName, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *service.ServiceAddresses); ok {
		r0 = rf(ctx, projectName, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceAddresses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectName, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceManager creates a new instance of ServiceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceManager {
	mock := &ServiceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
