// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	aiven "github.com/aiven/aiven-go-client"
	mock "github.com/stretchr/testify/mock"

	service "github.com/nais/aivenator/pkg/aiven/service"
)

// ServiceManager is an autogenerated mock type for the ServiceManager type
type ServiceManager struct {
	mock.Mock
}

// Get provides a mock function with given fields: projectName, serviceName
func (_m *ServiceManager) Get(projectName string, serviceName string) (*aiven.Service, error) {
	ret := _m.Called(projectName, serviceName)

	var r0 *aiven.Service
	if rf, ok := ret.Get(0).(func(string, string) *aiven.Service); ok {
		r0 = rf(projectName, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(projectName, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAddresses provides a mock function with given fields: projectName, serviceName
func (_m *ServiceManager) GetServiceAddresses(projectName string, serviceName string) (*service.ServiceAddresses, error) {
	ret := _m.Called(projectName, serviceName)

	var r0 *service.ServiceAddresses
	if rf, ok := ret.Get(0).(func(string, string) *service.ServiceAddresses); ok {
		r0 = rf(projectName, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceAddresses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(projectName, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
