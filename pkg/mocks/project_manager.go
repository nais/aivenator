// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProjectManager is an autogenerated mock type for the ProjectManager type
type ProjectManager struct {
	mock.Mock
}

// GetCA provides a mock function with given fields: ctx, projectName
func (_m *ProjectManager) GetCA(ctx context.Context, projectName string) (string, error) {
	ret := _m.Called(ctx, projectName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, projectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, projectName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectManager creates a new instance of ProjectManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectManager {
	mock := &ProjectManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
