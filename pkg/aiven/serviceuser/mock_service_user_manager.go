// Code generated by mockery v2.51.1. DO NOT EDIT.

package serviceuser

import (
	context "context"

	aiven "github.com/aiven/aiven-go-client/v2"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockServiceUserManager is an autogenerated mock type for the ServiceUserManager type
type MockServiceUserManager struct {
	mock.Mock
}

type MockServiceUserManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceUserManager) EXPECT() *MockServiceUserManager_Expecter {
	return &MockServiceUserManager_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, serviceUserName, projectName, serviceName, accessControl, logger
func (_m *MockServiceUserManager) Create(ctx context.Context, serviceUserName string, projectName string, serviceName string, accessControl *aiven.AccessControl, logger logrus.FieldLogger) (*aiven.ServiceUser, error) {
	ret := _m.Called(ctx, serviceUserName, projectName, serviceName, accessControl, logger)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *aiven.ServiceUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) (*aiven.ServiceUser, error)); ok {
		return rf(ctx, serviceUserName, projectName, serviceName, accessControl, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) *aiven.ServiceUser); ok {
		r0 = rf(ctx, serviceUserName, projectName, serviceName, accessControl, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.ServiceUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) error); ok {
		r1 = rf(ctx, serviceUserName, projectName, serviceName, accessControl, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceUserManager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServiceUserManager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceUserName string
//   - projectName string
//   - serviceName string
//   - accessControl *aiven.AccessControl
//   - logger logrus.FieldLogger
func (_e *MockServiceUserManager_Expecter) Create(ctx interface{}, serviceUserName interface{}, projectName interface{}, serviceName interface{}, accessControl interface{}, logger interface{}) *MockServiceUserManager_Create_Call {
	return &MockServiceUserManager_Create_Call{Call: _e.mock.On("Create", ctx, serviceUserName, projectName, serviceName, accessControl, logger)}
}

func (_c *MockServiceUserManager_Create_Call) Run(run func(ctx context.Context, serviceUserName string, projectName string, serviceName string, accessControl *aiven.AccessControl, logger logrus.FieldLogger)) *MockServiceUserManager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*aiven.AccessControl), args[5].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockServiceUserManager_Create_Call) Return(_a0 *aiven.ServiceUser, _a1 error) *MockServiceUserManager_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceUserManager_Create_Call) RunAndReturn(run func(context.Context, string, string, string, *aiven.AccessControl, logrus.FieldLogger) (*aiven.ServiceUser, error)) *MockServiceUserManager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, serviceUserName, projectName, serviceName, logger
func (_m *MockServiceUserManager) Delete(ctx context.Context, serviceUserName string, projectName string, serviceName string, logger logrus.FieldLogger) error {
	ret := _m.Called(ctx, serviceUserName, projectName, serviceName, logger)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, logrus.FieldLogger) error); ok {
		r0 = rf(ctx, serviceUserName, projectName, serviceName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceUserManager_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServiceUserManager_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceUserName string
//   - projectName string
//   - serviceName string
//   - logger logrus.FieldLogger
func (_e *MockServiceUserManager_Expecter) Delete(ctx interface{}, serviceUserName interface{}, projectName interface{}, serviceName interface{}, logger interface{}) *MockServiceUserManager_Delete_Call {
	return &MockServiceUserManager_Delete_Call{Call: _e.mock.On("Delete", ctx, serviceUserName, projectName, serviceName, logger)}
}

func (_c *MockServiceUserManager_Delete_Call) Run(run func(ctx context.Context, serviceUserName string, projectName string, serviceName string, logger logrus.FieldLogger)) *MockServiceUserManager_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockServiceUserManager_Delete_Call) Return(_a0 error) *MockServiceUserManager_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceUserManager_Delete_Call) RunAndReturn(run func(context.Context, string, string, string, logrus.FieldLogger) error) *MockServiceUserManager_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, serviceUserName, projectName, serviceName, logger
func (_m *MockServiceUserManager) Get(ctx context.Context, serviceUserName string, projectName string, serviceName string, logger logrus.FieldLogger) (*aiven.ServiceUser, error) {
	ret := _m.Called(ctx, serviceUserName, projectName, serviceName, logger)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *aiven.ServiceUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, logrus.FieldLogger) (*aiven.ServiceUser, error)); ok {
		return rf(ctx, serviceUserName, projectName, serviceName, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, logrus.FieldLogger) *aiven.ServiceUser); ok {
		r0 = rf(ctx, serviceUserName, projectName, serviceName, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.ServiceUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, logrus.FieldLogger) error); ok {
		r1 = rf(ctx, serviceUserName, projectName, serviceName, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceUserManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServiceUserManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceUserName string
//   - projectName string
//   - serviceName string
//   - logger logrus.FieldLogger
func (_e *MockServiceUserManager_Expecter) Get(ctx interface{}, serviceUserName interface{}, projectName interface{}, serviceName interface{}, logger interface{}) *MockServiceUserManager_Get_Call {
	return &MockServiceUserManager_Get_Call{Call: _e.mock.On("Get", ctx, serviceUserName, projectName, serviceName, logger)}
}

func (_c *MockServiceUserManager_Get_Call) Run(run func(ctx context.Context, serviceUserName string, projectName string, serviceName string, logger logrus.FieldLogger)) *MockServiceUserManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockServiceUserManager_Get_Call) Return(_a0 *aiven.ServiceUser, _a1 error) *MockServiceUserManager_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceUserManager_Get_Call) RunAndReturn(run func(context.Context, string, string, string, logrus.FieldLogger) (*aiven.ServiceUser, error)) *MockServiceUserManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetCacheExpiration provides a mock function with no fields
func (_m *MockServiceUserManager) GetCacheExpiration() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCacheExpiration")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockServiceUserManager_GetCacheExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCacheExpiration'
type MockServiceUserManager_GetCacheExpiration_Call struct {
	*mock.Call
}

// GetCacheExpiration is a helper method to define mock.On call
func (_e *MockServiceUserManager_Expecter) GetCacheExpiration() *MockServiceUserManager_GetCacheExpiration_Call {
	return &MockServiceUserManager_GetCacheExpiration_Call{Call: _e.mock.On("GetCacheExpiration")}
}

func (_c *MockServiceUserManager_GetCacheExpiration_Call) Run(run func()) *MockServiceUserManager_GetCacheExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceUserManager_GetCacheExpiration_Call) Return(_a0 time.Duration) *MockServiceUserManager_GetCacheExpiration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceUserManager_GetCacheExpiration_Call) RunAndReturn(run func() time.Duration) *MockServiceUserManager_GetCacheExpiration_Call {
	_c.Call.Return(run)
	return _c
}

// ObserveServiceUsersCount provides a mock function with given fields: ctx, projectName, serviceName, logger
func (_m *MockServiceUserManager) ObserveServiceUsersCount(ctx context.Context, projectName string, serviceName string, logger logrus.FieldLogger) {
	_m.Called(ctx, projectName, serviceName, logger)
}

// MockServiceUserManager_ObserveServiceUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveServiceUsersCount'
type MockServiceUserManager_ObserveServiceUsersCount_Call struct {
	*mock.Call
}

// ObserveServiceUsersCount is a helper method to define mock.On call
//   - ctx context.Context
//   - projectName string
//   - serviceName string
//   - logger logrus.FieldLogger
func (_e *MockServiceUserManager_Expecter) ObserveServiceUsersCount(ctx interface{}, projectName interface{}, serviceName interface{}, logger interface{}) *MockServiceUserManager_ObserveServiceUsersCount_Call {
	return &MockServiceUserManager_ObserveServiceUsersCount_Call{Call: _e.mock.On("ObserveServiceUsersCount", ctx, projectName, serviceName, logger)}
}

func (_c *MockServiceUserManager_ObserveServiceUsersCount_Call) Run(run func(ctx context.Context, projectName string, serviceName string, logger logrus.FieldLogger)) *MockServiceUserManager_ObserveServiceUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockServiceUserManager_ObserveServiceUsersCount_Call) Return() *MockServiceUserManager_ObserveServiceUsersCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceUserManager_ObserveServiceUsersCount_Call) RunAndReturn(run func(context.Context, string, string, logrus.FieldLogger)) *MockServiceUserManager_ObserveServiceUsersCount_Call {
	_c.Run(run)
	return _c
}

// NewMockServiceUserManager creates a new instance of MockServiceUserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceUserManager {
	mock := &MockServiceUserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
